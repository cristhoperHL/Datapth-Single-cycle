$date
	Wed Apr  1 04:59:42 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module datapath $end
$var wire 1 ! zero $end
$var wire 5 " write_reg [4:0] $end
$var wire 32 # sign_extend_out [31:0] $end
$var wire 32 $ shift_branch_out [31:0] $end
$var wire 32 % read_data2 [31:0] $end
$var wire 32 & read_data1 [31:0] $end
$var wire 32 ' pc [31:0] $end
$var wire 1 ( out_and $end
$var wire 32 ) mux_pc_end [31:0] $end
$var wire 32 * mux_end_cycle [31:0] $end
$var wire 32 + mux_branch_out [31:0] $end
$var wire 32 , memory_out [31:0] $end
$var wire 32 - jump_sl_out [31:0] $end
$var wire 1 . jump $end
$var wire 32 / instruction [31:0] $end
$var wire 32 0 data_2_out [31:0] $end
$var wire 32 1 d [31:0] $end
$var wire 6 2 alu_control_out [5:0] $end
$var wire 32 3 adder_branch_result [31:0] $end
$var wire 1 4 RegWrite $end
$var wire 1 5 RegDst $end
$var wire 1 6 MemtoReg $end
$var wire 2 7 MemWrite [1:0] $end
$var wire 2 8 MemRead [1:0] $end
$var wire 1 9 Branch $end
$var wire 32 : ALU_result [31:0] $end
$var wire 2 ; ALUSrc [1:0] $end
$var wire 6 < ALUOP [5:0] $end
$var reg 1 = clk $end
$var reg 1 > reset $end
$scope module AC $end
$var wire 6 ? func [5:0] $end
$var wire 6 @ ALUOP [5:0] $end
$var reg 6 A alu_control_out [5:0] $end
$upscope $end
$scope module APC $end
$var wire 32 B pc [31:0] $end
$var reg 32 C pc_end [31:0] $end
$upscope $end
$scope module Br_a $end
$var wire 1 ( out $end
$var wire 1 9 b $end
$var wire 1 ! a $end
$upscope $end
$scope module CU $end
$var wire 6 D instruction [5:0] $end
$var reg 6 E ALUOP [5:0] $end
$var reg 2 F ALUSrc [1:0] $end
$var reg 1 9 Branch $end
$var reg 2 G MemRead [1:0] $end
$var reg 2 H MemWrite [1:0] $end
$var reg 1 6 MemtoReg $end
$var reg 1 5 RegDst $end
$var reg 1 4 RegWrite $end
$var reg 1 . jump $end
$upscope $end
$scope module DM $end
$var wire 2 I Memread [1:0] $end
$var wire 2 J Memwrite [1:0] $end
$var wire 32 K write_data [31:0] $end
$var wire 32 L address [31:0] $end
$var reg 32 M read_data [31:0] $end
$upscope $end
$scope module IM $end
$var wire 32 N pc [31:0] $end
$var reg 32 O out [31:0] $end
$upscope $end
$scope module MW $end
$var wire 32 P a [31:0] $end
$var wire 1 6 sel $end
$var wire 32 Q out [31:0] $end
$var wire 32 R b [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 = clk $end
$var wire 1 > reset $end
$var wire 32 S d [31:0] $end
$var reg 32 T q [31:0] $end
$upscope $end
$scope module RF $end
$var wire 1 4 RegWrite $end
$var wire 1 = clk $end
$var wire 32 U read_data1 [31:0] $end
$var wire 32 V read_data2 [31:0] $end
$var wire 5 W read_reg1 [4:0] $end
$var wire 5 X read_reg2 [4:0] $end
$var wire 32 Y write_data [31:0] $end
$var wire 5 Z write_reg [4:0] $end
$upscope $end
$scope module SE $end
$var wire 16 [ instruction_in [15:0] $end
$var wire 32 \ instruction_out [31:0] $end
$upscope $end
$scope module SL2 $end
$var wire 32 ] inmediate [31:0] $end
$var wire 32 ^ out [31:0] $end
$upscope $end
$scope module add_b $end
$var wire 32 _ a [31:0] $end
$var wire 32 ` b [31:0] $end
$var wire 32 a out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 6 b alu_control_out [5:0] $end
$var wire 32 c read_data1 [31:0] $end
$var wire 32 d read_data2 [31:0] $end
$var reg 32 e ALU_result [31:0] $end
$var reg 1 ! zero $end
$upscope $end
$scope module alu_mux $end
$var wire 32 f a [31:0] $end
$var wire 32 g b [31:0] $end
$var wire 2 h sel [1:0] $end
$var reg 32 i y [31:0] $end
$upscope $end
$scope module j_sl $end
$var wire 26 j inst_jump [25:0] $end
$var wire 32 k pc_4 [31:0] $end
$var wire 32 l out [31:0] $end
$upscope $end
$scope module jump_branch $end
$var wire 32 m a [31:0] $end
$var wire 1 . sel $end
$var wire 32 n out [31:0] $end
$var wire 32 o b [31:0] $end
$upscope $end
$scope module m_branch $end
$var wire 32 p a [31:0] $end
$var wire 32 q b [31:0] $end
$var wire 1 ( sel $end
$var wire 32 r out [31:0] $end
$upscope $end
$scope module rgm2_1 $end
$var wire 5 s a [4:0] $end
$var wire 5 t b [4:0] $end
$var wire 1 5 sel $end
$var reg 5 u y [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 u
b0 t
b0 s
b100 r
b100 q
b10100 p
b100 o
b10000 n
b10000 m
b10000 l
b100 k
b100 j
b1 i
b0 h
b100 g
b1 f
bx e
b1 d
b1 c
b10101 b
b10100 a
b10000 `
b100 _
b10000 ^
b100 ]
b100 \
b100 [
b0 Z
bx Y
b0 X
b0 W
b1 V
b1 U
b0 T
b10000 S
bx R
bx Q
bx P
b1010100000000000000000000000100 O
b0 N
bx M
bx L
b1 K
b0 J
b0 I
b0 H
b0 G
b0 F
b10101 E
b10101 D
b100 C
b0 B
b10101 A
b10101 @
b100 ?
1>
1=
b10101 <
b0 ;
bx :
09
b0 8
b0 7
06
15
04
b10100 3
b10101 2
b100 1
b1 0
b1010100000000000000000000000100 /
1.
b10000 -
bx ,
b100 +
bx *
b10000 )
0(
b0 '
b1 &
b1 %
b10000 $
b100 #
b0 "
x!
$end
#1
0>
0=
#2
b101 *
b101 Q
b101 Y
0!
b101 :
b101 L
b101 R
b101 e
b100 2
b100 A
b100 b
14
b111111 <
b111111 @
b111111 E
0.
05
b1000000000010000 $
b1000000000010000 ^
b1000000000010000 `
b101 0
b101 d
b101 i
b100 "
b100 Z
b100 u
b10100 )
b10100 S
b10100 n
b10000000000100 #
b10000000000100 \
b10000000000100 ]
b10000000000100 g
b10000000000100 [
b101 %
b101 K
b101 V
b101 f
b100 X
b100 &
b100 U
b100 c
b11 W
b100 t
b100 s
b1100100001000000000010000 -
b1100100001000000000010000 l
b1100100001000000000010000 m
b11001000010000000000100 j
b0 D
b11001000010000000000100 /
b11001000010000000000100 O
b10100 +
b10100 o
b10100 r
b1000000000100100 3
b1000000000100100 a
b1000000000100100 p
b10100 1
b10100 C
b10100 _
b10100 k
b10100 q
b10000 '
b10000 B
b10000 N
b10000 T
1=
#3
0=
#4
b1 *
b1 Q
b1 Y
b1 :
b1 L
b1 R
b1 e
b1010000000010100 $
b1010000000010100 ^
b1010000000010100 `
b101 2
b101 A
b101 b
b110 0
b110 d
b110 i
b101 "
b101 Z
b101 u
b10100000000101 #
b10100000000101 \
b10100000000101 ]
b10100000000101 g
b10100000000101 [
b101 ?
b110 %
b110 K
b110 V
b110 f
b101 X
b101 &
b101 U
b101 c
b100 W
b101 t
b101 s
b10000101001010000000010100 -
b10000101001010000000010100 l
b10000101001010000000010100 m
b100001010010100000000101 j
b100001010010100000000101 /
b100001010010100000000101 O
b11000 )
b11000 S
b11000 n
b11000 +
b11000 o
b11000 r
b1010000000101100 3
b1010000000101100 a
b1010000000101100 p
b11000 1
b11000 C
b11000 _
b11000 k
b11000 q
b10100 '
b10100 B
b10100 N
b10100 T
1=
#5
0=
#6
b1 ;
b1 F
b1 h
b110 <
b110 @
b110 E
15
b11100 $
b11100 ^
b11100 `
b110 2
b110 A
b110 b
b0 "
b0 Z
b0 u
b111 #
b111 \
b111 ]
b111 g
b111 [
b111 ?
b0 X
b1 &
b1 U
b1 c
b0 W
b0 t
b0 s
b11100 -
b11100 l
b11100 m
b111 j
b110 D
b11000000000000000000000000111 /
b11000000000000000000000000111 O
b11100 )
b11100 S
b11100 n
b1000 *
b1000 Q
b1000 Y
b11100 +
b11100 o
b11100 r
b1000 :
b1000 L
b1000 R
b1000 e
b111000 3
b111000 a
b111000 p
b11100 1
b11100 C
b11100 _
b11100 k
b11100 q
b111 0
b111 d
b111 i
b11000 '
b11000 B
b11000 N
b11000 T
b1 %
b1 K
b1 V
b1 f
1=
#7
0=
#8
b111 2
b111 A
b111 b
b111 <
b111 @
b111 E
b10100 $
b10100 ^
b10100 `
b101 0
b101 d
b101 i
b1 "
b1 Z
b1 u
b101 #
b101 \
b101 ]
b101 g
b101 [
b101 ?
b1 X
b1 s
b1000000000000010100 -
b1000000000000010100 l
b1000000000000010100 m
b10000000000000101 j
b111 D
b11100000000010000000000000101 /
b11100000000010000000000000101 O
b100000 )
b100000 S
b100000 n
b100000 +
b100000 o
b100000 r
b0 *
b0 Q
b0 Y
b110100 3
b110100 a
b110100 p
b100000 1
b100000 C
b100000 _
b100000 k
b100000 q
b0 :
b0 L
b0 R
b0 e
b11100 '
b11100 B
b11100 N
b11100 T
b1000 &
b1000 U
b1000 c
b10 %
b10 K
b10 V
b10 f
1=
#9
0=
#10
b11111111111111111111111111111101 *
b11111111111111111111111111111101 Q
b11111111111111111111111111111101 Y
b11111111111111111111111111111101 :
b11111111111111111111111111111101 L
b11111111111111111111111111111101 R
b11111111111111111111111111111101 e
b1000 2
b1000 A
b1000 b
b1000 <
b1000 @
b1000 E
b1100 $
b1100 ^
b1100 `
b11 0
b11 d
b11 i
b10 "
b10 Z
b10 u
b11 #
b11 \
b11 ]
b11 g
b11 [
b11 ?
b10 X
b0 &
b0 U
b0 c
b1 W
b10 s
b100010000000000000001100 -
b100010000000000000001100 l
b100010000000000000001100 m
b1000100000000000000011 j
b1000 D
b100000001000100000000000000011 /
b100000001000100000000000000011 O
b100100 )
b100100 S
b100100 n
b100100 +
b100100 o
b100100 r
b110000 3
b110000 a
b110000 p
b100100 1
b100100 C
b100100 _
b100100 k
b100100 q
b100000 '
b100000 B
b100000 N
b100000 T
b11 %
b11 K
b11 V
b11 f
1=
#11
0=
#12
b1001 2
b1001 A
b1001 b
b1001 <
b1001 @
b1001 E
b11111111111111111111111111111101 *
b11111111111111111111111111111101 Q
b11111111111111111111111111111101 Y
b100000 $
b100000 ^
b100000 `
b1000 0
b1000 d
b1000 i
b11111111111111111111111111111101 :
b11111111111111111111111111111101 L
b11111111111111111111111111111101 R
b11111111111111111111111111111101 e
b11 "
b11 Z
b11 u
b1000 #
b1000 \
b1000 ]
b1000 g
b1000 [
b1000 ?
b11 X
b11111111111111111111111111111101 &
b11111111111111111111111111111101 U
b11111111111111111111111111111101 c
b10 W
b11 s
b1000011000000000000100000 -
b1000011000000000000100000 l
b1000011000000000000100000 m
b10000110000000000001000 j
b1001 D
b100100010000110000000000001000 /
b100100010000110000000000001000 O
b101000 )
b101000 S
b101000 n
b101000 +
b101000 o
b101000 r
b1001000 3
b1001000 a
b1001000 p
b101000 1
b101000 C
b101000 _
b101000 k
b101000 q
b100100 '
b100100 B
b100100 N
b100100 T
b100 %
b100 K
b100 V
b100 f
1=
#13
0=
#14
b0 *
b0 Q
b0 Y
b0 :
b0 L
b0 R
b0 e
b1101 2
b1101 A
b1101 b
b1101 <
b1101 @
b1101 E
b10100 $
b10100 ^
b10100 `
b101 0
b101 d
b101 i
b100 "
b100 Z
b100 u
b101 #
b101 \
b101 ]
b101 g
b101 [
b101 ?
b100 X
b11 W
b100 s
b1100100000000000000010100 -
b1100100000000000000010100 l
b1100100000000000000010100 m
b11001000000000000000101 j
b1101 D
b110100011001000000000000000101 /
b110100011001000000000000000101 O
b101100 )
b101100 S
b101100 n
b101100 +
b101100 o
b101100 r
b1000000 3
b1000000 a
b1000000 p
b101100 1
b101100 C
b101100 _
b101100 k
b101100 q
b101000 '
b101000 B
b101000 N
b101000 T
b101 %
b101 K
b101 V
b101 f
1=
#15
0=
#16
b1000 2
b1000 A
b1000 b
b0 ;
b0 F
b0 h
b111111 <
b111111 @
b111111 E
05
b100000 $
b100000 ^
b100000 `
b1000 0
b1000 d
b1000 i
b0 "
b0 Z
b0 u
b1000 #
b1000 \
b1000 ]
b1000 g
b1000 [
b1000 ?
b0 X
b1000 &
b1000 U
b1000 c
b0 W
b0 s
b100000 -
b100000 l
b100000 m
b1000 j
b0 D
b1000 /
b1000 O
b110000 )
b110000 S
b110000 n
b110000 +
b110000 o
b110000 r
b1010000 3
b1010000 a
b1010000 p
b110000 1
b110000 C
b110000 _
b110000 k
b110000 q
b101100 '
b101100 B
b101100 N
b101100 T
b1000 %
b1000 K
b1000 V
b1000 f
1=
#17
0=
#18
b1000 $
b1000 ^
b1000 `
b10 2
b10 A
b10 b
b10 #
b10 \
b10 ]
b10 g
b10 [
b10 ?
b1000 -
b1000 l
b1000 m
b10 j
b10 /
b10 O
b110100 )
b110100 S
b110100 n
b110100 +
b110100 o
b110100 r
b111100 3
b111100 a
b111100 p
b110100 1
b110100 C
b110100 _
b110100 k
b110100 q
b0 0
b0 d
b0 i
b110000 '
b110000 B
b110000 N
b110000 T
b0 &
b0 U
b0 c
b0 %
b0 K
b0 V
b0 f
1=
#19
0=
#20
b100000000 $
b100000000 ^
b100000000 `
b0 2
b0 A
b0 b
b1000000 #
b1000000 \
b1000000 ]
b1000000 g
b1000000 [
b0 ?
b100000000 -
b100000000 l
b100000000 m
b1000000 j
b1000000 /
b1000000 O
b111000 )
b111000 S
b111000 n
b111000 +
b111000 o
b111000 r
b100111000 3
b100111000 a
b100111000 p
b111000 1
b111000 C
b111000 _
b111000 k
b111000 q
b110100 '
b110100 B
b110100 N
b110100 T
1=
#21
0=
